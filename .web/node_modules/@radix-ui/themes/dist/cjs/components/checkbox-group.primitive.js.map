{
  "version": 3,
  "sources": ["../../../src/components/checkbox-group.primitive.tsx"],
  "sourcesContent": ["'use client';\n\nimport * as React from 'react';\nimport { Checkbox as CheckboxPrimitive, Direction } from 'radix-ui';\nimport {\n  Context,\n  Primitive,\n  useComposedRefs,\n  RovingFocus,\n  useControllableState,\n} from 'radix-ui/internal';\n\nconst { useDirection } = Direction;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroup\n * -----------------------------------------------------------------------------------------------*/\nconst CHECKBOX_GROUP_NAME = 'CheckboxGroup';\n\ntype ScopedProps<P> = P & { __scopeCheckboxGroup?: Context.Scope };\nconst [createCheckboxGroupContext, createCheckboxGroupScope] = Context.createContextScope(\n  CHECKBOX_GROUP_NAME,\n  [RovingFocus.createRovingFocusGroupScope, CheckboxPrimitive.createCheckboxScope]\n);\nconst useRovingFocusGroupScope = RovingFocus.createRovingFocusGroupScope();\nconst useCheckboxScope = CheckboxPrimitive.createCheckboxScope();\n\ntype CheckboxGroupContextValue = {\n  name?: string;\n  required: boolean;\n  disabled: boolean;\n  value?: string[];\n  onItemCheck(value: string): void;\n  onItemUncheck(value: string): void;\n};\n\nconst [CheckboxGroupProvider, useCheckboxGroupContext] =\n  createCheckboxGroupContext<CheckboxGroupContextValue>(CHECKBOX_GROUP_NAME);\n\ntype CheckboxGroupElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocus.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CheckboxGroupProps extends PrimitiveDivProps {\n  name?: CheckboxGroupContextValue['name'];\n  required?: React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>['required'];\n  disabled?: React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>['disabled'];\n  dir?: RovingFocusGroupProps['dir'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  defaultValue?: string[];\n  value?: CheckboxGroupContextValue['value'];\n  onValueChange?: (value: string[]) => void;\n}\n\nconst CheckboxGroup = React.forwardRef<CheckboxGroupElement, CheckboxGroupProps>(\n  (props: ScopedProps<CheckboxGroupProps>, forwardedRef) => {\n    const {\n      __scopeCheckboxGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange,\n      ...groupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeCheckboxGroup);\n    const direction = useDirection(dir);\n    const [value = [], setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    const handleItemCheck = React.useCallback(\n      (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n      [setValue]\n    );\n\n    const handleItemUncheck = React.useCallback(\n      (itemValue: string) =>\n        setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n      [setValue]\n    );\n\n    return (\n      <CheckboxGroupProvider\n        scope={__scopeCheckboxGroup}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={value}\n        onItemCheck={handleItemCheck}\n        onItemUncheck={handleItemUncheck}\n      >\n        <RovingFocus.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"group\"\n            data-disabled={disabled ? '' : undefined}\n            dir={direction}\n            {...groupProps}\n            ref={forwardedRef}\n          />\n        </RovingFocus.Root>\n      </CheckboxGroupProvider>\n    );\n  }\n);\n\nCheckboxGroup.displayName = CHECKBOX_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'CheckboxGroupItem';\n\ntype CheckboxGroupItemElement = React.ElementRef<typeof CheckboxPrimitive.Root>;\ntype CheckboxProps = React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>;\ninterface CheckboxGroupItemProps\n  extends Omit<CheckboxProps, 'checked' | 'defaultChecked' | 'onCheckedChange' | 'name'> {\n  value: string;\n}\n\nconst CheckboxGroupItem = React.forwardRef<CheckboxGroupItemElement, CheckboxGroupItemProps>(\n  (props: ScopedProps<CheckboxGroupItemProps>, forwardedRef) => {\n    const { __scopeCheckboxGroup, disabled, ...itemProps } = props;\n    const context = useCheckboxGroupContext(ITEM_NAME, __scopeCheckboxGroup);\n    const isDisabled = context.disabled || disabled;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeCheckboxGroup);\n    const checkboxScope = useCheckboxScope(__scopeCheckboxGroup);\n    const ref = React.useRef<React.ElementRef<typeof CheckboxPrimitive.Root>>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const checked = context.value?.includes(itemProps.value);\n\n    return (\n      <RovingFocus.Item asChild {...rovingFocusGroupScope} focusable={!isDisabled} active={checked}>\n        <CheckboxPrimitive.Root\n          name={context.name}\n          disabled={isDisabled}\n          required={context.required}\n          checked={checked}\n          {...checkboxScope}\n          {...itemProps}\n          ref={composedRefs}\n          onCheckedChange={(checked) => {\n            if (checked) {\n              context.onItemCheck(props.value);\n            } else {\n              context.onItemUncheck(props.value);\n            }\n          }}\n        />\n      </RovingFocus.Item>\n    );\n  }\n);\n\nCheckboxGroupItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroupIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxGroupIndicator';\n\ntype CheckboxGroupIndicatorElement = React.ElementRef<typeof CheckboxPrimitive.Indicator>;\ntype CheckboxIndicatorProps = React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Indicator>;\ninterface CheckboxGroupIndicatorProps extends CheckboxIndicatorProps {}\n\nconst CheckboxGroupIndicator = React.forwardRef<\n  CheckboxGroupIndicatorElement,\n  CheckboxGroupIndicatorProps\n>((props: ScopedProps<CheckboxGroupIndicatorProps>, forwardedRef) => {\n  const { __scopeCheckboxGroup, ...indicatorProps } = props;\n  const checkboxScope = useCheckboxScope(__scopeCheckboxGroup);\n  return <CheckboxPrimitive.Indicator {...checkboxScope} {...indicatorProps} ref={forwardedRef} />;\n});\n\nCheckboxGroupIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = CheckboxGroup;\nconst Item = CheckboxGroupItem;\nconst Indicator = CheckboxGroupIndicator;\n\nexport {\n  createCheckboxGroupScope,\n  //\n  CheckboxGroup,\n  CheckboxGroupItem,\n  CheckboxGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n};\nexport type { CheckboxGroupProps, CheckboxGroupItemProps, CheckboxGroupIndicatorProps };\n"],
  "mappings": "ukBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,EAAA,2BAAAC,EAAA,sBAAAC,EAAA,cAAAC,EAAA,SAAAC,EAAA,SAAAC,EAAA,6BAAAC,IAAA,eAAAC,EAAAT,GAEA,IAAAU,EAAuB,oBACvBC,EAAyD,oBACzDC,EAMO,6BAEP,KAAM,CAAE,aAAAC,CAAa,EAAI,YAKnBC,EAAsB,gBAGtB,CAACC,EAA4BP,CAAwB,EAAI,UAAQ,mBACrEM,EACA,CAAC,cAAY,4BAA6B,EAAAE,SAAkB,mBAAmB,CACjF,EACMC,EAA2B,cAAY,4BAA4B,EACnEC,EAAmB,EAAAF,SAAkB,oBAAoB,EAWzD,CAACG,EAAuBC,CAAuB,EACnDL,EAAsDD,CAAmB,EAiBrEZ,EAAgBQ,EAAM,WAC1B,CAACW,EAAwCC,IAAiB,CACxD,KAAM,CACJ,qBAAAC,EACA,KAAAC,EACA,aAAAC,EACA,MAAOC,EACP,SAAAC,EAAW,GACX,SAAAC,EAAW,GACX,YAAAC,EACA,IAAAC,EACA,KAAAC,EAAO,GACP,cAAAC,EACA,GAAGC,CACL,EAAIZ,EACEa,EAAwBjB,EAAyBM,CAAoB,EACrEY,EAAYtB,EAAaiB,CAAG,EAC5B,CAACM,EAAQ,CAAC,EAAGC,CAAQ,KAAI,wBAAqB,CAClD,KAAMX,EACN,YAAaD,EACb,SAAUO,CACZ,CAAC,EAEKM,EAAkB5B,EAAM,YAC3B6B,GAAsBF,EAAS,CAACG,EAAY,CAAC,IAAM,CAAC,GAAGA,EAAWD,CAAS,CAAC,EAC7E,CAACF,CAAQ,CACX,EAEMI,EAAoB/B,EAAM,YAC7B6B,GACCF,EAAS,CAACG,EAAY,CAAC,IAAMA,EAAU,OAAQJ,GAAUA,IAAUG,CAAS,CAAC,EAC/E,CAACF,CAAQ,CACX,EAEA,OACE3B,EAAA,cAACS,EAAA,CACC,MAAOI,EACP,KAAMC,EACN,SAAUG,EACV,SAAUC,EACV,MAAOQ,EACP,YAAaE,EACb,cAAeG,GAEf/B,EAAA,cAAC,cAAY,KAAZ,CACC,QAAO,GACN,GAAGwB,EACJ,YAAaL,EACb,IAAKM,EACL,KAAMJ,GAENrB,EAAA,cAAC,YAAU,IAAV,CACC,KAAK,QACL,gBAAekB,EAAW,GAAK,OAC/B,IAAKO,EACJ,GAAGF,EACJ,IAAKX,EACP,CACF,CACF,CAEJ,CACF,EAEApB,EAAc,YAAcY,EAM5B,MAAM4B,EAAY,oBASZtC,EAAoBM,EAAM,WAC9B,CAACW,EAA4CC,IAAiB,CAC5D,KAAM,CAAE,qBAAAC,EAAsB,SAAAK,EAAU,GAAGe,CAAU,EAAItB,EACnDuB,EAAUxB,EAAwBsB,EAAWnB,CAAoB,EACjEsB,EAAaD,EAAQ,UAAYhB,EACjCM,EAAwBjB,EAAyBM,CAAoB,EACrEuB,EAAgB5B,EAAiBK,CAAoB,EACrDwB,EAAMrC,EAAM,OAAwD,IAAI,EACxEsC,KAAe,mBAAgB1B,EAAcyB,CAAG,EAChDE,EAAUL,EAAQ,OAAO,SAASD,EAAU,KAAK,EAEvD,OACEjC,EAAA,cAAC,cAAY,KAAZ,CAAiB,QAAO,GAAE,GAAGwB,EAAuB,UAAW,CAACW,EAAY,OAAQI,GACnFvC,EAAA,cAAC,EAAAM,SAAkB,KAAlB,CACC,KAAM4B,EAAQ,KACd,SAAUC,EACV,SAAUD,EAAQ,SAClB,QAASK,EACR,GAAGH,EACH,GAAGH,EACJ,IAAKK,EACL,gBAAkBC,GAAY,CACxBA,EACFL,EAAQ,YAAYvB,EAAM,KAAK,EAE/BuB,EAAQ,cAAcvB,EAAM,KAAK,CAErC,EACF,CACF,CAEJ,CACF,EAEAjB,EAAkB,YAAcsC,EAMhC,MAAMQ,EAAiB,yBAMjB/C,EAAyBO,EAAM,WAGnC,CAACW,EAAiDC,IAAiB,CACnE,KAAM,CAAE,qBAAAC,EAAsB,GAAG4B,CAAe,EAAI9B,EAC9CyB,EAAgB5B,EAAiBK,CAAoB,EAC3D,OAAOb,EAAA,cAAC,EAAAM,SAAkB,UAAlB,CAA6B,GAAG8B,EAAgB,GAAGK,EAAgB,IAAK7B,EAAc,CAChG,CAAC,EAEDnB,EAAuB,YAAc+C,EAIrC,MAAM3C,EAAOL,EACPI,EAAOF,EACPC,EAAYF",
  "names": ["checkbox_group_primitive_exports", "__export", "CheckboxGroup", "CheckboxGroupIndicator", "CheckboxGroupItem", "Indicator", "Item", "Root", "createCheckboxGroupScope", "__toCommonJS", "React", "import_radix_ui", "import_internal", "useDirection", "CHECKBOX_GROUP_NAME", "createCheckboxGroupContext", "CheckboxPrimitive", "useRovingFocusGroupScope", "useCheckboxScope", "CheckboxGroupProvider", "useCheckboxGroupContext", "props", "forwardedRef", "__scopeCheckboxGroup", "name", "defaultValue", "valueProp", "required", "disabled", "orientation", "dir", "loop", "onValueChange", "groupProps", "rovingFocusGroupScope", "direction", "value", "setValue", "handleItemCheck", "itemValue", "prevValue", "handleItemUncheck", "ITEM_NAME", "itemProps", "context", "isDisabled", "checkboxScope", "ref", "composedRefs", "checked", "INDICATOR_NAME", "indicatorProps"]
}
